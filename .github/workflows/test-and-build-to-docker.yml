name: CI - Test & Docker Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches # The directory where Gradle stores dependencies
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          # If an exact match isn't found, use the most recent cache
          restore-keys: |
            gradle-${{ runner.os }}- 

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x gradlew # Ensures the Gradle wrapper script is executable

      - name: Run tests
        run: ./gradlew test

    build-and-push:
      runs-on: ubuntu-latest

      needs: test  # Wait until "test" job is succesful first!

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '17'

        - name: Cache Gradle dependencies
          uses: actions/cache@v3
          with:
            path: ~/.gradle/caches
            key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
              gradle-${{ runner.os }}-

        - name: Grant execute permission to Gradle wrapper
          run: chmod +x gradlew

        - name: Build the project  # Compile and package the application
          run: ./gradlew build -x test  # The `-x test` flag skips tests since they ran earlier

        - name: Log in to Docker Hub  # Authenticate with Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build Docker image  # Build a Docker image from the Dockerfile
          run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/brsc:latest .

        - name: Push Docker image  # Push the image to Docker Hub
          run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/brsc:latest
